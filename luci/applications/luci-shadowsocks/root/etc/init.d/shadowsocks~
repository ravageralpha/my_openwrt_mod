#!/bin/sh /etc/rc.common

START=95
STOP=95

ss_local_PID_FILE="/var/run/ss-local.pid"
ss_redir_PID_FILE="/var/run/ss-redir.pid"
ss_tunnel_PID_FILE="/var/run/ss-tunnel.pid"
ipset_blacklist="/etc/ipset/blacklist"
ipset_whitelist="/etc/ipset/whitelist"

start() {
	# HACK fd
	ulimit -n 4096
	
	config_load "shadowsocks"
	local enabled remote rport lport pass redir_enabled redir_port \
			whitelist_enabled blacklist_enabled dnsforward_enabled \
			dnsforward_type
	config_get enabled config enabled
	config_get remote config remote_server
	config_get rport config remote_port
	config_get lport config local_port
	config_get cipher config cipher
	config_get pass config password
	config_get redir_enabled config redir_enabled
	config_get redir_port config redir_port
	config_get whitelist_enabled config whitelist_enabled
	config_get blacklist_enabled config blacklist_enabled
	config_get dnsforward_enabled config dnsforward_enabled
	config_get dnsforward_type config dnsforward_type

	[ -z "$remote" ] || [ -z "$rport" ] || [ -z "$lport" ] || [ -z "$pass" ] && {
		echo "missing parameters. check config"
		return 1
	}

	[ "$enabled" = '1' ] && {
		service_start /usr/bin/ss-local \
			-s "$remote" \
			-p "$rport" \
			-l "$lport" \
			${cipher:+-m $cipher} \
			-k "$pass" \
			-u \
			-f "$ss_local_PID_FILE"
	}

	[ "$dnsforward_enabled" = '1' ] && {
		service_start /usr/bin/ss-tunnel \
			-s "$remote" \
			-p "$rport" \
			${cipher:+-m $cipher} \
			-k "$pass" \
			-u \
			-l 5353 \
			-L 8.8.8.8:53 \
			-f "$ss_tunnel_PID_FILE"

		uci del dhcp.@dnsmasq[-1].server
		uci set dhcp.@dnsmasq[-1].noresolv=1

		if [ "$dnsforward_type" = 'ChinaDNS-C' ];then
			service_start /usr/bin/chinadns \
				-l /etc/chinadns_iplist.txt \
				-c /etc/chinadns_chnroute.txt \
				-p 1053 \
				-s 114.114.114.114,127.0.0.1:5353 &	
			uci add_list dhcp.@dnsmasq[-1].server=127.0.0.1#1053
		else
			uci add_list dhcp.@dnsmasq[-1].server=127.0.0.1#5353
		fi
		uci commit dhcp
		/etc/init.d/dnsmasq restart
	}

	[ "$redir_enabled" = '1' ] && {
		service_start /usr/bin/ss-redir \
			-s "$remote" \
			-p "$rport" \
			-l "$redir_port" \
			${cipher:+-m $cipher} \
			-k "$pass" \
			-f "$ss_redir_PID_FILE"
		
		remoteip="`resolveip -t5 $remote`"

		iptables -t nat -N SHADOWSOCKS
		iptables -t nat -A SHADOWSOCKS -d 0.0.0.0/8 -j RETURN
		iptables -t nat -A SHADOWSOCKS -d 10.0.0.0/8 -j RETURN
		iptables -t nat -A SHADOWSOCKS -d 127.0.0.0/8 -j RETURN
		iptables -t nat -A SHADOWSOCKS -d 169.254.0.0/16 -j RETURN
		iptables -t nat -A SHADOWSOCKS -d 172.16.0.0/12 -j RETURN
		iptables -t nat -A SHADOWSOCKS -d 192.168.0.0/16 -j RETURN
		iptables -t nat -A SHADOWSOCKS -d 224.0.0.0/4 -j RETURN
		iptables -t nat -A SHADOWSOCKS -d 240.0.0.0/4 -j RETURN
		iptables -t nat -A SHADOWSOCKS -d $remoteip -j RETURN

		[ "$blacklist_enabled" = '1' ] && {
			sed -e "s/^/-A blacklist &/g" -e "1 i\-N blacklist nethash --hashsize 64" $ipset_blacklist | ipset -R -!
			iptables -t nat -A SHADOWSOCKS -p tcp -m set --match-set blacklist src -j RETURN
		}

		if [ "$whitelist_enabled" = '1' ];then
			sed -e "s/^/-A whitelist &/g" -e "1 i\-N whitelist nethash --hashsize 4096" $ipset_whitelist | ipset -R -!
			iptables -t nat -A SHADOWSOCKS -p tcp -m set ! --match-set whitelist dst -j REDIRECT --to-ports $redir_port
		else
			iptables -t nat -A SHADOWSOCKS -p tcp -j REDIRECT --to-ports $redir_port
		fi
		iptables -t nat -I zone_lan_prerouting -j SHADOWSOCKS
	}
}

ss_local_stop() {
	service_stop /usr/bin/ss-local && {
		rm "$ss_local_PID_FILE"
	}
}

ss_redir_stop() {
	service_stop /usr/bin/ss-redir && {
		iptables -t nat -D zone_lan_prerouting -j SHADOWSOCKS &> /dev/null
		iptables -t nat -F SHADOWSOCKS &> /dev/null
		sleep 1
		iptables -t nat -X SHADOWSOCKS &> /dev/null
		ipset destroy whitelist &> /dev/null
		ipset destroy blacklist &> /dev/null
		rm "$ss_redir_PID_FILE"
	}
}

ss_tunnel_stop() {
	service_stop /usr/bin/ss-tunnel && {
		uci set dhcp.@dnsmasq[-1].noresolv=0
		uci del dhcp.@dnsmasq[-1].server
		uci commit dhcp
		/etc/init.d/dnsmasq restart
		killall -9 chinadns &> /dev/null
		rm "$ss_tunnel_PID_FILE"
	}
}

stop() {
	ss_local_stop
	ss_redir_stop
	ss_tunnel_stop
}
